generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  username     String        @unique
  password     String
  avatar       String?
  timestamp    DateTime      @default(now())
  projects     Project[]
  userDetails  UserDetails?
  verification Verification? @relation("UserVerification")
  // Define the relation with the Follow model
  followers   Follow[] @relation("UserFollowers")
  following   Follow[] @relation("UserFollowing")
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("UserFollowing", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId]) // Ensure a user can only follow another user once
}


model Verification {
  id               String   @id @default(cuid())
  userId           String   @unique
  verificationCode Int?
  verified         Boolean  @default(false)
  timestamp        DateTime @default(now())
  lastUpdated      DateTime @default(now())
  user             User     @relation("UserVerification", fields: [userId], references: [id])
}

model UserDetails {
  id          String    @id @default(cuid())
  userId      String    @unique
  firstName   String
  lastName    String
  dob         DateTime?
  gender      String?
  bio         String?
  phoneNumber String?
  imageUrl    String?
  address     String?
  occupation  String?
  company     String?
  jobTitle    String?
  socials     String[]
  website     String?
  timestamp   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
}

model Project {
  id        String   @id @default(cuid())
  userId    String
  name      String
  type      String
  createdOn DateTime @default(now())
  image     String?
  isPrivate Boolean
  boards    Board[]  @relation("ProjectBoards")
  user      User     @relation(fields: [userId], references: [id])
}

model Board {
  id          String     @id @default(cuid())
  description String
  title       String
  link        String?
  image       String?
  category    String
  boardColor  String
  tags        String[]
  timestamp   DateTime   @default(now())
  creator     String
  likes       Float
  projectId   String
  project     Project    @relation("ProjectBoards", fields: [projectId], references: [id])
  feedbacks   Feedback[]
}

model Feedback {
  id        String   @id @default(cuid())
  boardId   String
  username  String
  email     String?
  rating    Float
  comment   String
  timestamp DateTime @default(now())
  board     Board    @relation(fields: [boardId], references: [id])
}
